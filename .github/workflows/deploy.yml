name: Deploy to Fly.io

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  API_KEY: ${{ secrets.API_KEY }}
  FMCSA_API_TOKEN: ${{ secrets.FMCSA_API_TOKEN }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: Create test environment file
      run: |
        echo "API_KEY=test-api-key-for-ci" > .env
        echo "FMCSA_API_TOKEN=test-token-for-ci" >> .env
        echo "API_URL=http://localhost:8000" >> .env
        echo "ENVIRONMENT=testing" >> .env
        
    - name: Run syntax check
      run: |
        python -m py_compile main.py
        python -m py_compile agent.py
        
    - name: Test configuration loading
      run: |
        python -c "from core.config import Config; print('‚úÖ Configuration loaded successfully')"
        
    - name: Test imports
      run: |
        python -c "from main import app; print('‚úÖ FastAPI app imported successfully')"
        python -c "from services.fmcsa import FMCSAService; print('‚úÖ FMCSA service imported successfully')"

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Deploy to Fly.io
      uses: superfly/flyctl-actions/deploy-fly-app@master
      with:
        api-token: ${{ secrets.FLY_API_TOKEN }}
        remote-only: true
        
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        sleep 30
        curl -f https://happyrobot-inbound.fly.dev/health || exit 1
        echo "‚úÖ Deployment successful!"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment to Fly.io completed successfully!"
          echo "üåê App available at: https://happyrobot-inbound.fly.dev/"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi